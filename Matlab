% % Arjun Budgell Caleb Wilson Liam Moore
% Group 19 - March 6, 2024
% This code takes arduino input from a joystick to control the motion 
% of a mass on the MATLAB screen
%The mass motion is described by the 2nd order differential equation: 
% dxdt(1,1) = x(2);
%dxdt(2,1) = -c/m*x(2)+u/m;
% 
% MATLAB code to implement I/O with Arduino UNO via USB is also used 
%to create a handshake between MATlab and Arduino

clear all
close all

global m c;
m = 10; %kg, body mass
c = 10; %damping constant

%% Run this MATLAB code after uploading 
% "Arduino_basic_communication.ino" to Arduino UNO
%  (Be sure to wait a few seconds for Arduino to initialize)

% create a serial client for communication with the Arduino UNO
% note this command also "resets" the Arduino UNO as if
% the red "reset" button on the Arduino UNO was pressed
% need to ensure COM port number and baud rate is correct and consistent
% with Arduino IDE
arduinoObj = serialport("/dev/cu.usbmodem101",115200)

pause(2); % THIS 2 second PAUSE IS CRITICAL FOR MATLAB TO SETUP 
          % THE SERIAL PORT

% setup I/O terminator to be "Carriage Return" and "Linefeed"
configureTerminator(arduinoObj,"CR/LF");

flush(arduinoObj); % discard all data currently in the serial stream
[fig, ball, alpha] = figure_setup() %Set up figure window to display motion
                                    %of the ball

n = 700; % number of communication events

% pre-allocate arrays for speed

t               = zeros(n,1); % time stamp vector (s)
h               = zeros(n,1); % store sample times (s)
u = zeros(n,1); %joystick x-axis 

x = zeros(2, n); %Store Rk4 solution of 2x1 system state
                 %[mass position;
                 %mass velocity]
x(:,1)=[20; %initial position
         0]; %initial velocity

%plot initial ball location in figure window

[b,a,~] = size(ball); %determine size of ball
scale=0.07; %set scaling of ball image in figure
H=image(ball,'Xdata',[0-scale*a/2,0+scale*a/2],...
             'YData',[x(1,1)-scale*b/2, x(1,1)+scale*b/2], ...
             'AlphaData', alpha); %draw ball

start_time = tic;      % start stopwatch for timestamping data (s)
start_iteration = tic; % start stopwatch for tracking sample times (s)
%RK4 parameters
w1=1/6; w2=1/3; w3=1/3; w4=1/6; c2=1/2; c3=1/2; c4=1;
a21=1/2; a31=0; a32=1/2; a41=0; a42=0; a43=1;

for i = 1:n % loop through num_iter communication events
    
    %MATLAB_Data(i) = i; % MATLAB sends loop counter data to Arduino
                        % for communication synchronization
    writeline(arduinoObj,int2str(i));

    % MATLAB waits for Arduino to respond with data
    while true
       if arduinoObj.NumBytesAvailable > 0 % Arduino has data ready 
                                           % for MATLAB
          break;
       end
    end
    
    % read data from Arduino
    data = readline(arduinoObj); % receive data from Arduino
    tmp = split(data,',');       % data string is comma-delimited
    num=str2double(tmp);         % convert strings to numeric double type
    Arduino_Counter = num(1);    % store Arduino counter data
    u(i) = num(2)-512;    % store Arduino data (joystick x-axis as an 
                          %applied force value between 0 to 1023
                          %converted to -512 to +512

    fprintf("Joystick x = %d\n", u(i));


    % store time data for plotting results
    t(i)=toc(start_time);      % timestamp collected data
    h(i)=toc(start_iteration); % determine sample time h (s)
    start_iteration=tic; % restart stopwatch for tracking sample time h (s)

    % display MATLAB and Arduino Counters in Command Window to 
    % ensure they are the same (indicating synchronized)

   %rk4 numerical method to determine position of ball
    x(:, i+1)=RK4(u(i), t(i), x(:,i), h(i),w1,w2,w3,w4,c2,c3,c4,a21, ...
        a31,a32,a41,a42,a43); %RK4 method - need to define parameters. 
   %update position of ball in figure window
   delete(H); %delete previous instance of ball
   %copy and paste image command from above
   H=image(ball,'Xdata',[0-scale*a/2,0+scale*a/2],...
                'YData',[x(1,i)-scale*b/2, x(1,i)+scale*b/2], ...
                'AlphaData', alpha); %draw ball

          pause(0.0001) %force matlab to update the plot
  
end % loop back and send data to Arduino (which is waiting for it)

clear arduinoObj;  % close the Serial Communication port
                   % if you do not close the serial COM port
                   % then you will not be able to download
                   % programs to the Arduino board

% print mean sample time to the Command Window
fprintf('Mean sample time: %2.1f Hz\n',1/mean(h)) 

%% Plot sample results
figure(2)
plot(t,h,'k-','LineWidth',1.5)
title("Sample Time vs Time",'FontSize',16)
xlabel('Time (s)','FontSize',14)
ylabel('Sample Time (s)','FontSize',14)

figure(3)
plot(t,u,'g-','LineWidth',2)
title("Force u(t) Vs Time",'FontSize',16)
xlabel('Time (s)','FontSize',14)
ylabel('Newtons (N)','FontSize',14)

figure(4)
plot(t, x(1,1:n),'k-', 'LineWidth',2);
title('Ball Position Vs Time', 'FontSize', 16);
xlabel('Time(s)', 'FontSize',14);
ylabel('Position (m)', 'FontSize',14)

%%function to setup figure window
function[f, ball_image, alpha_channel] = figure_setup()

    f = figure('position',[1 94 560 703]);
    hold on %prevent axis from flipping when plotting images
    axis('equal') % set correct aspect ratio
    ax=gca; %using full figure window and gets current axis
    ax.Position = [0 0 1 1]; %Normalizing the axis position
    set(gcf, 'ToolBar', 'none', 'MenuBar','none');
    set(gca, 'visible', 'off');
    set(gcf, 'color', 'w');
    ylim([-100 +100]);
    axis('manual');
    %for fast performance make the image use as little as pixels as 
    %possible
    
    [ball_image,~,alpha_channel] = imread('circle_black_transparent.png');

    ball_image = flipud(ball_image); %flip ball_image 
    alpha_channel = flipud(alpha_channel); %Flip alpha channel to match 
                                           %flipped image




end

% Runge-Kutta (RK) fourth order method (implemented from class)
function x_new=RK4(ui,ti,xi,h,w1,w2,w3,w4,c2,c3,c4,...
                   a21,a31,a32,a41,a42,a43)
    k1=h*f(ui,ti,xi); % output of f(t,x) is 4x1, so k1 is 4x1
    k2=h*f(ui,ti+c2*h,xi+a21*k1);
    k3=h*f(ui,ti+c3*h,xi+a31*k1+a32*k2);
    k4=h*f(ui,ti+c4*h,xi+a41*k1+a42*k2+a43*k3);
    x_new=xi+w1*k1+w2*k2+w3*k3+w4*k4;
end
%Function for the 2 first order ODE representing the 2nd ODE
function dxdt=f(u,t,x)
global m c; 
dxdt(1,1) = x(2);
dxdt(2,1) = -c/m*x(2)+u/m; %mass-damper system

end
